name: Build & Deploy Application to GHCR

on:
  push:
    branches:
      - main

env:
  APP_NAME: bills
  DOCKERFILE_PATH: Dockerfile
  DOCKER_IMAGE_NAME: ghcr.io/enucatl/bills

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read   # Allows checking out code
      packages: write  # Allows pushing to GitHub Container Registry (ghcr.io)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Important: Fetches full history for git describe to work
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "pyproject.toml"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13' # Or your desired Python version, e.g., '3.11', '3.12'

      - name: Install project dependencies with uv
        run: uv sync --all-extras --dev

      - name: Get Application Version from setuptools-git-versioning
        id: get_version
        run: |
          VERSION=$(uv run setuptools-git-versioning)
          echo "Detected VERSION: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Run Django tests
        run: DATABASE_URL="sqlite:///:memory:" uv run python src/send_bills/manage.py test bills api

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}          # The GitHub Actions bot username
          password: ${{ secrets.GITHUB_TOKEN }} # The special token for repo/GHCR access

      - name: Generate Docker Tags
        id: generate_tags
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          # Strip the '-g<sha>' suffix to get the base version (e.g., 0.5.2)
          BASE_VERSION=$(echo $VERSION | cut -d'-' -f1)

          # Split the base version into major, minor, patch parts
          IFS='.' read -r -a V_PARTS <<< "$BASE_VERSION"
          V_MAJOR=${V_PARTS[0]}
          V_MINOR=${V_PARTS[1]}

          # Create a list of tags. `sort -u` removes any duplicates.
          # (e.g., if version is '0.5.2', $VERSION and $BASE_VERSION are the same)
          TAG_LIST=$( (
          echo "latest"
          echo "$VERSION"
          echo "$BASE_VERSION"
          echo "$V_MAJOR.$V_MINOR"
          echo "$V_MAJOR"
          ) | sort -u )

          # Build the final multi-line tags string for the docker/build-push-action
          # by prepending the image name to each tag.
          FINAL_TAGS=""
          for TAG in $TAG_LIST; do
          FINAL_TAGS="${FINAL_TAGS}${{ env.DOCKER_IMAGE_NAME }}:$TAG\n"
          done

          # Use a special syntax for multiline outputs in GitHub Actions
          echo "tags<<EOF" >> $GITHUB_OUTPUT
          echo -e "$FINAL_TAGS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "Generated tags:"
          echo -e "$FINAL_TAGS"

      - name: Build and push Docker image to GHCR
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ env.DOCKERFILE_PATH }}
          push: true
          tags: ${{ steps.generate_tags.outputs.tags }}
          build-args: |
            # Pass the calculated version as a build argument to the Dockerfile
            VERSION=${{ steps.get_version.outputs.VERSION }}

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    if: success()
    permissions:
      contents: read   # Allows checking out code
    steps:
      - name: Trigger Portainer Redeploy
        # This step runs only if the build and push was successful.
        # It sends a POST request to a Portainer webhook, which triggers
        # Portainer to pull the new :latest image and redeploy the service.
        run: curl -X POST ${{ secrets.PORTAINER_WEBHOOK_URL }}
