name: Build & Deploy Application to GHCR

on:
  push:
    branches:
      - main

env:
  APP_NAME: bills
  DOCKERFILE_PATH: Dockerfile
  DOCKER_IMAGE_NAME: ghcr.io/enucatl/bills

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read   # Allows checking out code
      packages: write  # Allows pushing to GitHub Container Registry (ghcr.io)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Important: Fetches full history for git describe to work
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13' # Or your desired Python version, e.g., '3.11', '3.12'

      - name: Install uv
        run: |
          pip install uv

      - name: Install project dependencies with uv
        # This command assumes your project has a pyproject.toml or setup.py
        # at the root and installs all its dependencies, including
        # setuptools-git-versioning if it's a declared dependency.
        run: uv pip install --system .[dev]

      - name: Get Application Version from setuptools-git-versioning
        id: get_version
        run: |
          # Use python -c to execute a short script that gets the version
          # using setuptools_git_versioning.
          VERSION=$(python -m setuptools_git_versioning)
          echo "Detected VERSION: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Run Django tests
        run: DATABASE_URL="sqlite:///:memory:" python src/send_bills/manage.py test bills api

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}          # The GitHub Actions bot username
          password: ${{ secrets.GITHUB_TOKEN }} # The special token for repo/GHCR access

      - name: Build and push Docker image to GHCR
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ env.DOCKERFILE_PATH }}
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE_NAME }}:${{ steps.get_version.outputs.VERSION }}
            ${{ env.DOCKER_IMAGE_NAME }}:latest
          build-args: |
            # Pass the calculated version as a build argument to the Dockerfile
            VERSION=${{ steps.get_version.outputs.VERSION }}

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    if: success()
    permissions:
      contents: read   # Allows checking out code
    steps:
      - name: Trigger Portainer Redeploy
        # This step runs only if the build and push was successful.
        # It sends a POST request to a Portainer webhook, which triggers
        # Portainer to pull the new :latest image and redeploy the service.
        if: success()
        run: curl -X POST ${{ secrets.PORTAINER_WEBHOOK_URL }}

