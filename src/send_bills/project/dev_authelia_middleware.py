from typing import Callable

from django.conf import settings
from django.contrib.auth.models import User
from django.http import HttpRequest, HttpResponse


class DevAutheliaHeaderMiddleware:
    """
    Middleware to simulate Authelia headers during local development (DEBUG=True).

    This allows testing authentication flows that rely on `REMOTE_USER` and
    `REMOTE_EMAIL` headers without needing a full Authelia setup locally.
    It automatically injects predefined `HTTP_REMOTE_USER` and `HTTP_REMOTE_EMAIL`
    into `request.META` if `DEBUG` is True and the user is not already authenticated.

    It also ensures that a `devuser` exists in the database. For setting staff/superuser
    status, it is recommended to use a custom `RemoteUserBackend`
    (like `CustomRemoteUserBackend` provided in this project) as it's the
    appropriate place for user configuration during authentication.
    """

    def __init__(self, get_response: Callable[[HttpRequest], HttpResponse]):
        """Initializes the middleware.

        Args:
            get_response: The next middleware or view in the chain.
        """
        self.get_response = get_response

    def __call__(self, request: HttpRequest) -> HttpResponse:
        """Processes the request.

        If `settings.DEBUG` is True and the user is not authenticated, it
        injects simulated headers and ensures a development user exists.

        Args:
            request: The incoming `HttpRequest` object.

        Returns:
            The `HttpResponse` object generated by the subsequent middleware or view.
        """
        if settings.DEBUG and not request.user.is_authenticated:
            dev_username: str = "devuser"  # Your test username
            dev_email: str = "devuser@example.com"  # Your test email

            # Inject the simulated headers into request.META
            # Django's `RemoteUserMiddleware` will pick these up.
            request.META["HTTP_REMOTE_USER"] = dev_username
            request.META["HTTP_REMOTE_EMAIL"] = dev_email

            # Ensure the devuser exists in the database.
            # RemoteUserBackend will handle actual authentication and creation,
            # but pre-creating here ensures the email is set on first creation.
            try:
                user = User.objects.get(username=dev_username)
            except User.DoesNotExist:
                # If the user doesn't exist, create it.
                # The `CustomRemoteUserBackend` (if configured) will then handle
                # setting `is_staff` and `is_superuser` and an unusable password.
                user, created = User.objects.get_or_create(
                    username=dev_username,
                    defaults={
                        "email": dev_email,
                    },
                )
                if created:
                    # Set an unusable password immediately for externally managed users
                    # This is good practice even if CustomRemoteUserBackend also does it,
                    # as it ensures consistency.
                    user.set_unusable_password()
                    user.save()

        response: HttpResponse = self.get_response(request)
        return response
